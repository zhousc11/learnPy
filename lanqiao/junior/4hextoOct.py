'''
问题描述
给定n个十六进制正整数，输出它们对应的八进制数。

输入格式
输入的第一行为一个正整数n （1<=n<=10）。
接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。

输出格式
输出n行，每行为输入对应的八进制正整数。
【注意】
输入的十六进制数不会有前导0，比如012A。
输出的八进制数也不能有前导0。
样例输入
2
39
123ABC

样例输出
71
435274
'''
n = int(input())  # 先获取了要转换的个数
for _ in range(n):  # 遍历一共有n个数字
    hex_num = input()  # 输入
    dec_num = int(hex_num, 16)  # 将输入的字符转换为16进制数
    oct_num = oct(dec_num)[2:]  # oct将16进制数转换为8进制数，并进行切片操作。因为Python中的8进制数是0o开头的，没有前导
# 这一句因为oct()将dec_num转换为一个字符串，所以可以进行切片操作
# 但是其实int还依然是int类型，只是oct转换为了字符串
    print(oct_num)
